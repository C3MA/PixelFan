#ifndef WEBSITES_HPP
#define WEBSITES_HPP

class Websites
{
    public:
    static constexpr const char* mainPage = "<html lang=\"de\">"
    "<head>"
"<head>\r"
"<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>PixelFan</title>\r"
"<style>\r"
    "body {background-color: #ccc; margin: 0; padding: 0; text-align: center;}\r"
    "input {background-color: #ccc; border-radius: 2px;}\r"
    ".menu { background-color: rgb(4, 0, 59); color: #ccc; padding: 1.2em; width: 100%; box-sizing: border-box; margin-bottom: 1em;}\r"
    "#previewCanvas { margin: 1em; }\r"
    ".configContainer { display: inline-block; }\r"
    ".configField { margin: 6px; padding: 9px; background-color: #eee; display: inline-block; vertical-align: top; width: 15em; height: 8em; box-sizing: border-box;}\r"
    ".smiley { font-size: 1.5em; cursor: pointer;}\r"
    ".upload-btn-wrapper { position: relative; overflow: hidden; display: inline-block; margin-bottom: 1em; }\r"
    ".btn { border: 2px solid gray; color: #ccc; background-color: rgb(4, 0, 59); padding: 8px 20px; border-radius: 24px; font-size: 20px; font-weight: bold; }\r"
    ".upload-btn-wrapper input[type=file] { font-size: 100px; position: absolute; left: 0; top: 0; opacity: 0; }\r"
"</style>\r"
"</head>\r"
"<body><div class=\"menu\">\r"
"IP: <input type=\"text\" id=\"ip\" value=\"192.168.4.1\">\r"
"<div style=\"width: 2em; display: inline-block;\"></div>\r"
"Port: <input type=\"text\" id=\"port\" value=\"81\" style=\"width: 2.5em;\">\r"
"<div style=\"width: 1em; display: inline-block;\"></div>\r"
"Connection state: <div id=\"connectionState\" onclick=\"toggleConnection()\" style=\"background-color: rgb(221, 51, 51); display: inline-block; width: 1em; height: 1em; border-radius: 0.5em;\"></div>\r"
"</div>\r"
"<h1>Welcome to PixelFan</h1>\r"
"<div class=\"configContainer\">\r"

"<div class=\"configField\">\r"
"<div class=\"upload-btn-wrapper\">\r"
    "<button class=\"btn\">Upload a file</button>\r"
    "<input type=\"file\" id=\"uploadfile\">\r"
"</div>\r"

"<br>\r"
"<input type=\"radio\" id=\"alignFit\" name=\"imageAlignment\" checked=\"checked\" onchange=\"document.getElementById('uploadfile').dispatchEvent(new Event('change'));\" />\r"
"<label for=\"alignFit\">fit</label>\r"
"<input type=\"radio\" id=\"alignCut\" name=\"imageAlignment\" onchange=\"document.getElementById('uploadfile').dispatchEvent(new Event('change'));\" />\r"
"<label for=\"alignCut\">cut</label>\r"
"</div><div class=\"configField\">\r"
"Font color: <input type=\"color\" id=\"fontColor\" onchange=\"addText()\" value=\"#ffffff\" /><br />\r"
"<textarea cols=\"11\" rows=\"4\" id=\"textInput\" onkeyup=\"addText()\"></textarea>\r"
"</div>\r"

"<div class=\"configField\">\r"
    "<span class=\"smiley\" onclick=\"showSmiley(this);\">&#128578;</span>\r"
    "<span class=\"smiley\" onclick=\"showSmiley(this);\">&#128512;</span>\r"
    "<span class=\"smiley\" onclick=\"showSmiley(this);\">&#128521;</span>\r"
    "<span class=\"smiley\" onclick=\"showSmiley(this);\">&#129315;</span>\r"
    "<span class=\"smiley\" onclick=\"showSmiley(this);\">&#128523;</span>\r"
    "<span class=\"smiley\" onclick=\"showSmiley(this);\">&#128525;</span>\r"
    "<span class=\"smiley\" onclick=\"showSmiley(this);\">&#128526;</span>\r"
    "<span class=\"smiley\" onclick=\"showSmiley(this);\">&#128539;</span>\r"
    "<span class=\"smiley\" onclick=\"showSmiley(this);\">&#128556;</span>\r"
    "<span class=\"smiley\" onclick=\"showSmiley(this);\">&#128520;</span>\r"
"</div>\r"
"</div>\r"
"<br />\r"

"<canvas id=\"hiddenCanvas\" style=\"display:none;\"></canvas>\r"
"<canvas id=\"hiddenTextCanvas\" style=\"display:none;\"></canvas>\r"
"<canvas id=\"previewCanvas\" width=\"200px\" height=\"200px\"></canvas><br />\r"
"<input type=\"button\" class=\"btn\" value=\"send\" onclick=\"sendToFan()\">\r"

"<script>var socket;var uploadfile = document.querySelector('#uploadfile');\r"
"uploadfile.addEventListener('change', imageChanged, false);\r"
"var hiddenCanvas = document.getElementById('hiddenCanvas');\r"
"var hiddenCtx = hiddenCanvas.getContext('2d');\r"
"var hiddenTextCanvas = document.getElementById('hiddenTextCanvas');\r"
"var hiddenTextCtx = hiddenTextCanvas.getContext('2d');\r"
"var previewCanvas = document.getElementById('previewCanvas');\r"
"var previewCtx = previewCanvas.getContext('2d');\r"
"var MAX_WIDTH = 65;\r"
"var MAX_HEIGHT = 65;\r"
"var NUM_OF_LINES = 180;\r"
"var NUM_LEDS = 26;\r"
"var matrixPolar = new Uint8Array(NUM_LEDS * NUM_OF_LINES * 4);\r"
"document.onload = openWebSocket();\r"
"function openWebSocket() {\r"
"ip = document.getElementById('ip').value;\r"
"port = document.getElementById('port').value;\r"
"console.log(\"connect to \" + ip + \":\" + port);\r"
"socket = new WebSocket('ws://' + ip + ':'+port+'', ['arduino']);\r"
"socket.onopen = function () \r"
"{\r"
"console.log('connected');\r"
"document.getElementById('connectionState').style.backgroundColor = \"#3d3\";\r"
"};\r"
"socket.onerror = function (error) {\r"
"console.log('WebSocket Error ', error);\r"
"document.getElementById('connectionState').style.backgroundColor = \"#dd3\";\r"
"};\r"
"socket.onclose = function () {\r"
"console.log('WebSocket connection closed');\r"
"document.getElementById('connectionState').style.backgroundColor = \"#d33\";\r"
"};\r"
"}\r"
"function toggleConnection() {\r"
"if(socket.readyState === WebSocket.CLOSED)\r"
"{\r"
"openWebSocket();\r"
"}\r"
"else\r"
"{\r"
"socket.close();\r"
"}\r"
"}\r"
"function imageChanged(evt)\r"
"{var file = evt.target.files[0];\r"
"if (!file.type.match('image.*')) {\r"
"alert(\"wrong file format\");\r"
"return;\r"
"}\r"
"var reader = new FileReader();\r"
"reader.onload = function (event){\r"
"var img = new Image();\r"
"var fit = document.getElementById('alignFit').checked;\r"
"img.src = event.target.result;\r"
"img.onload = function()\r"
"{\r"
    "width = img.width;\r"
    "height = img.height;\r"
    "if (width > height) \r"
    "{\r"
        "if (fit && width > MAX_WIDTH) {\r"
            "height *= MAX_WIDTH / width;\r"
            "width = MAX_WIDTH;\r"
        "}\r"
        "if(!fit && height > MAX_HEIGHT)\r"
        "{\r"
            "width *= MAX_HEIGHT / height;\r"
            "height = MAX_HEIGHT;\r"
        "}\r"
    "} else {\r"
        "if (fit && height > MAX_HEIGHT) \r"
        "{\r"
            "width *= MAX_HEIGHT / height;\r"
            "height = MAX_HEIGHT;\r"
        "}\r"
        "if(!fit && width > MAX_WIDTH)\r"
        "{\r"
           "height *= MAX_WIDTH / width;\r"
           "width = MAX_WIDTH;\r"
        "}\r"
    "}\r"
    "hiddenCanvas.width = MAX_WIDTH;\r"
    "hiddenCanvas.height = MAX_HEIGHT;\r"

    "hiddenCtx.drawImage(img, (MAX_WIDTH - width) / 2, (MAX_HEIGHT - height)/2, width, height);\r"
    "transformMatrix();\r"
    "drawPreview();\r"
"}\r"
"img.src = event.target.result;\r"
"};\r"
"reader.readAsDataURL(file);\r"
"}\r"
"function uploadFile(file)\r"
"{\r"
"var url = '/upload';\r"
"var xhr = new XMLHttpRequest();\r"
"var fd = new FormData();\r"
"xhr.open(\"POST\", url, true);\r"
"xhr.onreadystatechange = function() \r"
"{\r"
"if (xhr.readyState == 4 && xhr.status == 200) \r"
"{\r"
"console.log(xhr.responseText);\r"
"}\r"
"};\r"
"fd.append(\"upload_file\", file);\r"
"xhr.send(fd);\r"
"}\r"
"function sendToFan() {\r"
"//transformMatrix();\r"
"var tmp = 0;\r"
"var round = 0;\r"
"var buffer;\r"
"for(var i = 0; i < matrixPolar.length; i++) {\r"
"if(tmp == 0) {\r"
"if(((round*1000) + 1000) < matrixPolar.length) {\r"
"var buffer = new Uint8Array(1002);\r"
"} else {\r"
"var buffer = new Uint8Array(2 + matrixPolar.length - (round*1000));\r"
"}buffer[0] = (((round * 1000) >> 8) & 0xFF);\r"
"buffer[1] = ((round * 1000) & 0xFF);\r"
"}\r"
"buffer[tmp + 2] = matrixPolar[i];\r"
"tmp++;\r"
"if(tmp == 1000 || (tmp + 2) == buffer.length) {\r"
"socket.send(buffer);\r"
"tmp = 0;\r"
"round++;\r"
"}\r"
"}\r"

"}\r"
"function transformMatrix() {\r"
"var angleStep = (2 * Math.PI) / NUM_OF_LINES;\r"
"var currentAngle;\r"
"var currentRadius;\r"
"var rStart = 7;\r"
"var x_img, y_img;\r"
"var x, y;\r"
"var p, i2, p2;\r"
"var imageData = hiddenCtx.getImageData(0, 0, MAX_WIDTH, MAX_HEIGHT).data;\r"
"var textData = hiddenTextCtx.getImageData(0, 0, hiddenTextCanvas.width, hiddenTextCanvas.height).data;\r"

"for (var i = 0; i < NUM_OF_LINES; i++)\r"
"{\r"
"currentAngle = i * angleStep;\r"
"for (var l = 0; l < NUM_LEDS; l++)\r"
"{\r"
"currentRadius = rStart + (NUM_LEDS - l);\r"
"x_img = 32.5 + Math.sin(currentAngle) * currentRadius;\r"
"y_img = 32.5 - Math.cos(currentAngle) * currentRadius;\r"
"x = Math.floor(x_img);\r"
"y = Math.floor(y_img);\r"
"if (x >= MAX_WIDTH) x = MAX_WIDTH - 1;\r"
"if (x < 0) x = 0;\r"
"if (y >= MAX_HEIGHT) y = MAX_HEIGHT - 1;\r"
"if (y < 0) y = 0;\r"

"matrixPolar[(l + (i * NUM_LEDS))*4 + 0] = 230;\r"
"matrixPolar[(l + (i * NUM_LEDS))*4 + 1] = imageData[(x + y*MAX_WIDTH)*4 + 2];   //blue\r"
"matrixPolar[(l + (i * NUM_LEDS))*4 + 2] = imageData[(x + y*MAX_WIDTH)*4 + 1];   //green\r"
"matrixPolar[(l + (i * NUM_LEDS))*4 + 3] = imageData[(x + y*MAX_WIDTH)*4 + 0];   //red\r"

"i2 = i + (NUM_OF_LINES / 4);\r"
"if(i2 >= NUM_OF_LINES)\r"
    "i2 -= NUM_OF_LINES;\r"

"x = i2;\r"
"y = l;\r"

"if(i2 >= NUM_OF_LINES / 2)\r"
"{\r"
    "y = hiddenTextCanvas.height - y;\r"
    "x = NUM_OF_LINES/ 2 - x;\r"
"}\r"

"var alpha = textData[(x + y*hiddenTextCanvas.width)*4 + 3];\r"
"if(alpha > 0)\r"
"{\r"
    "matrixPolar[(l + (i * NUM_LEDS))*4 + 1] = textData[(x + y*hiddenTextCanvas.width)*4 + 2];  //blue\r"
    "matrixPolar[(l + (i * NUM_LEDS))*4 + 2] = textData[(x + y*hiddenTextCanvas.width)*4 + 1];  //green\r"
    "matrixPolar[(l + (i * NUM_LEDS))*4 + 3] = textData[(x + y*hiddenTextCanvas.width)*4 + 0];  //red\r"
"}\r"

"}\r"
"}\r"

"}\r"
"function drawPreview()\r"
"{\r"
    "var angleStep = (2 * Math.PI) / NUM_OF_LINES;\r"
    "var ledDist = previewCanvas.height / 66.6667;  //400mm Durchmesser, alle 6mm eine LED --> 66,6667 LEds im Durchmesser\r"
    "var rStart = (66.6667 - 2*NUM_LEDS) * ledDist / 2;\r"
    "var center_x = previewCanvas.width / 2;\r"
    "var center_y = previewCanvas.height / 2;\r"
    "previewCtx.lineWidth = ledDist/2;\r"

    "previewCtx.fillStyle='black';\r"
    "previewCtx.fillRect(0, 0, previewCanvas.width, previewCanvas.height);\r"

    "for (var i = 0; i < NUM_OF_LINES; i++)\r"
    "{\r"
        "var currentAngle = i * angleStep;\r"
        "var nextAngle = currentAngle + angleStep;\r"

        "for (var l = 0; l < NUM_LEDS; l++)\r"
        "{\r"
            "var currentRadius = (rStart + (NUM_LEDS - l) * ledDist);\r"
            "var start_x = center_x + Math.sin(currentAngle) * currentRadius;\r"
            "var start_y = center_y - Math.cos(currentAngle) * currentRadius;\r"
            "var end_x = center_x + Math.sin(nextAngle) * currentRadius;\r"
            "var end_y = center_y - Math.cos(nextAngle) * currentRadius;\r"
            "var r = matrixPolar[(l + (i * NUM_LEDS))*4 + 3];\r"
            "var g = matrixPolar[(l + (i * NUM_LEDS))*4 + 2];\r"
            "var b = matrixPolar[(l + (i * NUM_LEDS))*4 + 1];\r"

            "previewCtx.strokeStyle = \"rgb(\"+r+\",\"+g+\",\"+b+\")\";\r"

            "previewCtx.beginPath();\r"
            "previewCtx.moveTo(start_x, start_y);\r"
            "previewCtx.lineTo(end_x, end_y);\r"
            "previewCtx.stroke();\r"
        "}\r"
    "}\r"
"}\r"
"function addText()\r"
"{\r"
    "hiddenTextCanvas.width = NUM_OF_LINES/2;\r"
    "hiddenTextCanvas.height = NUM_LEDS*2;\r"
    "hiddenTextCtx = hiddenTextCanvas.getContext('2d');\r"

    "var text = document.getElementById(\"textInput\").value.split('\\n');\r"

    "hiddenTextCtx.font = \"13px Courier New\";\r"
    "hiddenTextCtx.textAlign = 'center';\r"
    "hiddenTextCtx.fillStyle = document.getElementById('fontColor').value;\r"

    "if(text[0] != undefined) hiddenTextCtx.fillText(text[0], hiddenTextCanvas.width/2, NUM_LEDS/2-4);\r"
    "if(text[1] != undefined) hiddenTextCtx.fillText(text[1], hiddenTextCanvas.width/2, NUM_LEDS-5);\r"
    "if(text[2] != undefined) hiddenTextCtx.fillText(text[2], hiddenTextCanvas.width/2, NUM_LEDS+NUM_LEDS/2 );\r"
    "if(text[3] != undefined) hiddenTextCtx.fillText(text[3], hiddenTextCanvas.width/2, NUM_LEDS*2 -1 );\r"

    "transformMatrix();\r"
    "drawPreview();\r"
"}\r"

"function showSmiley(e)\r"
"{\r"
    "hiddenCanvas.width = MAX_WIDTH;\r"
    "hiddenCanvas.height = MAX_HEIGHT;\r"

    "hiddenCtx.font = \"66px Courier New\";\r"
    "hiddenCtx.textAlign = 'center';\r"
    "hiddenCtx.fillStyle = document.getElementById('fontColor').value;\r"

    "hiddenCtx.fillText(e.innerHTML, hiddenCanvas.width/2, 55);\r"

    "transformMatrix();\r"
    "drawPreview();\r"
"}\r"
"</script></body>"
    "</html>\n";
};

#endif
